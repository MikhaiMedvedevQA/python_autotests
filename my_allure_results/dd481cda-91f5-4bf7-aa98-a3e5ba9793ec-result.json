{"name": "test_positive_login", "status": "skipped", "statusDetails": {"message": "XFAIL Wait for fix bug #2445\n\nselenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[class=\"MuiInputBase-input MuiOutlinedInput-input k_form_f_email cs-1pk1fka\"]\"}\n  (Session info: chrome=135.0.7049.96); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF6583C5355+78597]\n\tGetHandleVerifier [0x00007FF6583C53B0+78688]\n\t(No symbol) [0x00007FF6581791AA]\n\t(No symbol) [0x00007FF6581CF149]\n\t(No symbol) [0x00007FF6581CF3FC]\n\t(No symbol) [0x00007FF658222467]\n\t(No symbol) [0x00007FF6581F712F]\n\t(No symbol) [0x00007FF65821F2BB]\n\t(No symbol) [0x00007FF6581F6EC3]\n\t(No symbol) [0x00007FF6581C03F8]\n\t(No symbol) [0x00007FF6581C1163]\n\tGetHandleVerifier [0x00007FF65866EF0D+2870973]\n\tGetHandleVerifier [0x00007FF6586696B8+2848360]\n\tGetHandleVerifier [0x00007FF658686993+2967875]\n\tGetHandleVerifier [0x00007FF6583E019A+188746]\n\tGetHandleVerifier [0x00007FF6583E847F+222255]\n\tGetHandleVerifier [0x00007FF6583CD2D4+111236]\n\tGetHandleVerifier [0x00007FF6583CD482+111666]\n\tGetHandleVerifier [0x00007FF6583B35A9+5465]\n\tBaseThreadInitThunk [0x00007FFE01947374+20]\n\tRtlUserThreadStart [0x00007FFE0223CC91+33]", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e7304b015b130179a91a2fb594502a69\")>\n\n    @pytest.mark.xfail (reason=\"Wait for fix bug #2445\") # так помечают тест который не проходит\n    def test_positive_login(browser): # вставим в аргумент нашего теста фикстуру browser\n        '''\n        TRP-1 Positive login case -- это название теста в TMS\n        '''\n    \n        # открываем URL - стр. логин и пароль\n        browser.get(URL)\n        # найдем на странице CSS селектор <class> поля ввода email -> class=\"MuiInputBase-input MuiOutlinedInput-input k_form_f_email css-1pk1fka\"\n        # и присвоим значение переменной\n>       email_input = browser.find_element(by=By.CSS_SELECTOR, value='[class=\"MuiInputBase-input MuiOutlinedInput-input k_form_f_email cs-1pk1fka\"]')\n\ntests\\web\\test_pokemon_web.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000216621B7DA0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...583B35A9+5465]\\\\n\\\\tBaseThreadInitThunk [0x00007FFE01947374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFE0223CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[class=\"MuiInputBase-input MuiOutlinedInput-input k_form_f_email cs-1pk1fka\"]\"}\nE         (Session info: chrome=135.0.7049.96); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6583C5355+78597]\nE       \tGetHandleVerifier [0x00007FF6583C53B0+78688]\nE       \t(No symbol) [0x00007FF6581791AA]\nE       \t(No symbol) [0x00007FF6581CF149]\nE       \t(No symbol) [0x00007FF6581CF3FC]\nE       \t(No symbol) [0x00007FF658222467]\nE       \t(No symbol) [0x00007FF6581F712F]\nE       \t(No symbol) [0x00007FF65821F2BB]\nE       \t(No symbol) [0x00007FF6581F6EC3]\nE       \t(No symbol) [0x00007FF6581C03F8]\nE       \t(No symbol) [0x00007FF6581C1163]\nE       \tGetHandleVerifier [0x00007FF65866EF0D+2870973]\nE       \tGetHandleVerifier [0x00007FF6586696B8+2848360]\nE       \tGetHandleVerifier [0x00007FF658686993+2967875]\nE       \tGetHandleVerifier [0x00007FF6583E019A+188746]\nE       \tGetHandleVerifier [0x00007FF6583E847F+222255]\nE       \tGetHandleVerifier [0x00007FF6583CD2D4+111236]\nE       \tGetHandleVerifier [0x00007FF6583CD482+111666]\nE       \tGetHandleVerifier [0x00007FF6583B35A9+5465]\nE       \tBaseThreadInitThunk [0x00007FFE01947374+20]\nE       \tRtlUserThreadStart [0x00007FFE0223CC91+33]\n\nenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchElementException"}, "description": "\n    TRP-1 Positive login case -- это название теста в TMS\n    ", "start": 1745006519759, "stop": 1745006525839, "uuid": "c0734120-98ce-455f-8e46-3e0a4f510eb1", "historyId": "ac346a6bda2b5f93f0e802141a772f3f", "testCaseId": "ac346a6bda2b5f93f0e802141a772f3f", "fullName": "tests.web.test_pokemon_web#test_positive_login", "labels": [{"name": "tag", "value": "@pytest.mark.xfail(reason='Wait for fix bug #2445')"}, {"name": "parentSuite", "value": "tests.web"}, {"name": "suite", "value": "test_pokemon_web"}, {"name": "host", "value": "Idea-PC"}, {"name": "thread", "value": "13976-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.web.test_pokemon_web"}]}
{"name": "test_positive_login", "status": "failed", "statusDetails": {"message": "AssertionError: Unexpected trainer_id\nassert '2318' == '2319'\n  \n  - 2319\n  ?    ^\n  + 2318\n  ?    ^", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e5c8db2e722dbf846e052367cea56058\")>\n\n    def test_positive_login(browser):\n        '''\n        TRP-1 Positive login case\n        '''\n    \n        # открываем URL - стр. логин и пароль\n        browser.get(URL)\n        # найдем на странице CSS селектор <class> поля ввода email -> class=\"MuiInputBase-input MuiOutlinedInput-input k_form_f_email css-1pk1fka\"\n        # и присвоим значение переменной\n        email_input = browser.find_element(by=By.CSS_SELECTOR, value='[class=\"MuiInputBase-input MuiOutlinedInput-input k_form_f_email css-1pk1fka\"]')\n        # такой же результат при поиске по <id>\n        # email_input = browser.find_element(by=By.CSS_SELECTOR, value='[id=\"k_email\"]')\n        # кликнем на это поле\n        email_input.click()\n        # введем адрес почты\n        email_input.send_keys('2371diverse@indigobook.com')\n        # находим так же селектор поля пароль по селектору iD\n        # и присваиваем переменной\n        password_input = browser.find_element(by=By.CSS_SELECTOR, value='[id=\"k_password\"]')\n        password_input.click()\n        password_input.send_keys('123Qwe')\n        # находим так же селектор кнопки ВОЙТИ по селектору class\n        # и присваиваем переменной\n        button = browser.find_element(by=By.CSS_SELECTOR, value='[class=\"MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeLarge MuiButton-containedSizeLarge MuiButton-colorPrimary MuiButton-fullWidth MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-sizeLarge MuiButton-containedSizeLarge MuiButton-colorPrimary MuiButton-fullWidth style_1_popup_white_base_button_orange style_1_caption_14_500 k_form_send_auth css-cm2fpt\"]')\n        button.click() # кликаем и переходим на загланую страницу Покемонов!\n    \n        # Вводим условное ожидание на 10 сек проверять кажд. 2 сек пока URL не станет ...\n        WebDriverWait(browser,timeout=10,poll_frequency=2).until(EC.url_to_be('https://pokemonbattle-stage.ru/'))\n    \n        # находим справа вверху на странице ID тренера\n        # и присваиваим переменной\n        trainer_id = browser.find_element(by=By.CSS_SELECTOR, value='[class=\"header_card_trainer_id_num\"]')\n    \n        # обработаем text в переменной trainer_id используя строковую функцию\n        # в этом примере не используется\n        # text_id = trainer_id.text.replace('/n', ' ')\n    \n        # утверждаю, что\n>       assert trainer_id.text == '2319', 'Unexpected trainer_id'\nE       AssertionError: Unexpected trainer_id\nE       assert '2318' == '2319'\nE         \nE         - 2319\nE         ?    ^\nE         + 2318\nE         ?    ^\n\ntests\\web\\test_pokemon_web.py:64: AssertionError"}, "description": "\n    TRP-1 Positive login case\n    ", "start": 1745005650746, "stop": 1745005663242, "uuid": "24be65ea-bc2d-4984-890d-9ce1dc2d28ed", "historyId": "ac346a6bda2b5f93f0e802141a772f3f", "testCaseId": "ac346a6bda2b5f93f0e802141a772f3f", "fullName": "tests.web.test_pokemon_web#test_positive_login", "labels": [{"name": "parentSuite", "value": "tests.web"}, {"name": "suite", "value": "test_pokemon_web"}, {"name": "host", "value": "Idea-PC"}, {"name": "thread", "value": "9200-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.web.test_pokemon_web"}]}